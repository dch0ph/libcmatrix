%!PS-Adobe-3.1 EPSF-3.0
%%Title: eigsfig.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: NMR group 
%%CreationDate: 4/25/2004
%%CropBox: 0.000000 0.000000 525.765625 206.670898
%%BoundingBox: 0 0 526 207 
%%HiResBoundingBox: 0.000000 0.000000 525.765625 206.670898
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: font SymbolMT
%%+ font TimesNewRomanPSMT
%%+ font TimesNewRomanPS-ItalicMT
%%+ font Courier
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: SymbolMT
%%+ TimesNewRomanPSMT
%%+ TimesNewRomanPS-ItalicMT
%%+ Courier
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -206.671 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 206.671 ln
525.766 206.671 ln
525.766 0 ln
clp
0 107.658 mo
488 107.658 ln
false op
1 1 1 rgb
f
0.75 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0 107.658 mo
488 107.658 ln
0 0 0 rgb
s
1 lw
[4 4 ] 0 dsh
185.333 106.991 mo
185.333 151.911 148.919 188.325 104 188.325 cv
59.0806 188.325 22.6665 151.911 22.6665 106.991 cv
22.6665 62.0718 59.0806 25.6577 104 25.6577 cv
148.919 25.6577 185.333 62.0718 185.333 106.991 cv
cp
s
191.333 106.991 mo
191.333 110.305 188.647 112.991 185.333 112.991 cv
182.02 112.991 179.333 110.305 179.333 106.991 cv
179.333 103.677 182.02 100.991 185.333 100.991 cv
188.647 100.991 191.333 103.677 191.333 106.991 cv
f
29.3335 106.991 mo
29.3335 110.305 26.647 112.991 23.3335 112.991 cv
20.02 112.991 17.3335 110.305 17.3335 106.991 cv
17.3335 103.677 20.02 100.991 23.3335 100.991 cv
26.647 100.991 29.3335 103.677 29.3335 106.991 cv
f
110.333 25.9912 mo
110.333 29.3052 107.647 31.9912 104.333 31.9912 cv
101.02 31.9912 98.3335 29.3052 98.3335 25.9912 cv
98.3335 22.6772 101.02 19.9912 104.333 19.9912 cv
107.647 19.9912 110.333 22.6772 110.333 25.9912 cv
f
110.333 187.991 mo
110.333 191.305 107.647 193.991 104.333 193.991 cv
101.02 193.991 98.3335 191.305 98.3335 187.991 cv
98.3335 184.677 101.02 181.991 104.333 181.991 cv
107.647 181.991 110.333 184.677 110.333 187.991 cv
f
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
469 106.991 mo
469 151.911 432.586 188.325 387.666 188.325 cv
342.747 188.325 306.333 151.911 306.333 106.991 cv
306.333 62.0718 342.747 25.6577 387.666 25.6577 cv
432.586 25.6577 469 62.0718 469 106.991 cv
cp
s
474.666 106.991 mo
474.666 110.472 471.886 113.293 468.456 113.293 cv
465.026 113.293 462.246 110.472 462.246 106.991 cv
462.246 103.511 465.026 100.689 468.456 100.689 cv
471.886 100.689 474.666 103.511 474.666 106.991 cv
f
414.831 23.4189 mo
418.094 24.4946 419.878 28.0498 418.818 31.3594 cv
417.758 34.6694 414.255 36.481 410.993 35.4053 cv
407.73 34.3296 405.947 30.7744 407.006 27.4648 cv
408.066 24.1553 411.569 22.3438 414.831 23.4189 cv
f
318.016 55.3408 mo
320.032 52.5244 323.916 51.9014 326.69 53.9463 cv
329.465 55.9922 330.08 59.9331 328.063 62.7485 cv
326.048 65.5649 322.165 66.1875 319.39 64.1431 cv
316.616 62.0967 316.001 58.1563 318.016 55.3408 cv
f
318.016 158.642 mo
316 155.826 316.616 151.885 319.39 149.839 cv
322.165 147.794 326.048 148.418 328.063 151.234 cv
330.081 154.049 329.465 157.989 326.69 160.037 cv
323.916 162.081 320.032 161.457 318.016 158.642 cv
f
414.831 190.563 mo
411.568 191.639 408.066 189.827 407.006 186.518 cv
405.947 183.208 407.731 179.652 410.993 178.577 cv
414.255 177.5 417.757 179.313 418.818 182.624 cv
419.878 185.933 418.093 189.488 414.831 190.563 cv
f
save_ctm
%%IncludeResource: font TimesNewRomanPS-ItalicMT
/TimesNewRomanPS-ItalicMT*1 
[
61{/.notdef}repeat /equal 45{/.notdef}repeat /k 148{/.notdef}repeat
] /TimesNewRomanPS-ItalicMT nfnt
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
195.333 100.324 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*1 
[
48{/.notdef}repeat /zero 207{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
213.557 100.324 mov
(0) sh
%%IncludeResource: font TimesNewRomanPS-ItalicMT
/TimesNewRomanPS-ItalicMT*2 
[
32{/.notdef}repeat /space 223{/.notdef}repeat
] /TimesNewRomanPS-ItalicMT nfnt
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
221.957 100.324 mov
( ) sh
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*2 
[
40{/.notdef}repeat /parenleft 215{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
227.357 100.324 mov
(\() sh
%%IncludeResource: font Courier
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
231.353 100.324 mov
(0) sh
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*3 
[
41{/.notdef}repeat /parenright 214{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
238.103 100.324 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
479 100.324 mov
2.39999 0 (k=) ash
/TimesNewRomanPSMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
497.224 100.324 mov
(0) sh
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
505.624 100.324 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
511.024 100.324 mov
(\() sh
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
515.02 100.324 mov
(0) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
521.77 100.324 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
422.333 24.3242 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*4 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*4 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
440.557 24.3242 mov
(2) sh
%%IncludeResource: font SymbolMT
/SymbolMT*1 
[
112{/.notdef}repeat /pi 143{/.notdef}repeat
] /SymbolMT nfnt
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
447.757 24.3242 mov
(p) sh
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*5 
[
47{/.notdef}repeat /slash 5{/.notdef}repeat /five 202{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*5 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
455.543 24.3242 mov
1.19998 0 (/5) ash
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
467.277 24.3242 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
472.677 24.3242 mov
(\() sh
%%IncludeResource: font Courier
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
476.673 24.3242 mov
(1) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
483.423 24.3242 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
332.999 68.3242 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*6 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*6 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
351.223 68.3242 mov
(4) sh
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
358.423 68.3242 mov
(p) sh
/TimesNewRomanPSMT*5 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
366.209 68.3242 mov
1.19998 0 (/5) ash
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
377.943 68.3242 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
383.343 68.3242 mov
(\() sh
%%IncludeResource: font Courier
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
387.339 68.3242 mov
(2) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
394.089 68.3242 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
332.999 146.991 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*7 
[
150{/.notdef}repeat /endash 105{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*7 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
351.223 146.991 mov
(\226) sh
/TimesNewRomanPSMT*6 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
358.423 146.991 mov
(4) sh
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
365.623 146.991 mov
(p) sh
/TimesNewRomanPSMT*5 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
373.409 146.991 mov
1.19998 0 (/5) ash
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
385.143 146.991 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
390.543 146.991 mov
(\() sh
%%IncludeResource: font Courier
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
394.539 146.991 mov
(3) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
401.289 146.991 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
421.665 194.991 mov
2.39999 0 (k=) ash
/TimesNewRomanPSMT*7 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
439.889 194.991 mov
(\226) sh
/TimesNewRomanPSMT*4 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
447.089 194.991 mov
(2) sh
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
454.289 194.991 mov
(p) sh
/TimesNewRomanPSMT*5 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
462.075 194.991 mov
1.19998 0 (/5) ash
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
473.809 194.991 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
479.209 194.991 mov
(\() sh
%%IncludeResource: font Courier
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
483.205 194.991 mov
(4) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
489.955 194.991 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
31.9995 122.324 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPS-ItalicMT
/TimesNewRomanPS-ItalicMT*3 
[
150{/.notdef}repeat /endash 105{/.notdef}repeat
] /TimesNewRomanPS-ItalicMT nfnt
/TimesNewRomanPS-ItalicMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
50.2233 122.324 mov
(\226) sh
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
58.6233 122.324 mov
(p) sh
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
67.6093 122.324 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
73.0093 122.324 mov
(\() sh
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
77.0054 122.324 mov
(2) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
83.7554 122.324 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
110 16.3242 mov
2.39999 0 (k=) ash
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
128.223 16.3242 mov
(p) sh
/TimesNewRomanPSMT*5 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
137.209 16.3242 mov
(/) sh
/TimesNewRomanPSMT*4 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
142.943 16.3242 mov
(2) sh
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
151.343 16.3242 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
156.743 16.3242 mov
(\() sh
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
160.739 16.3242 mov
(1) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
167.489 16.3242 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
restore_ctm
save_ctm
/TimesNewRomanPS-ItalicMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
110 202.991 mov
2.39999 0 (k=) ash
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*8 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*8 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
128.223 202.991 mov
(3) sh
/SymbolMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
136.623 202.991 mov
(p) sh
%%IncludeResource: font SymbolMT
/SymbolMT*2 
[
47{/.notdef}repeat /slash 2{/.notdef}repeat /two 205{/.notdef}repeat
] /SymbolMT nfnt
/SymbolMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
145.609 202.991 mov
2.40001 0 (/2) ash
/TimesNewRomanPS-ItalicMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
159.743 202.991 mov
( ) sh
/TimesNewRomanPSMT*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
165.143 202.991 mov
(\() sh
/Courier findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
169.139 202.991 mov
(3) sh
/TimesNewRomanPSMT*3 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
175.889 202.991 mov
(\)) sh
restore_ctm
save_ctm
restore_ctm
save_ctm
%%IncludeResource: font TimesNewRomanPS-ItalicMT
/TimesNewRomanPS-ItalicMT*4 
[
78{/.notdef}repeat /N 177{/.notdef}repeat
] /TimesNewRomanPS-ItalicMT nfnt
/TimesNewRomanPS-ItalicMT*4 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
12.4248 13 mov
(N) sh
%%IncludeResource: font TimesNewRomanPSMT
/TimesNewRomanPSMT*9 
[
61{/.notdef}repeat /equal 194{/.notdef}repeat
] /TimesNewRomanPSMT nfnt
/TimesNewRomanPSMT*9 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
23.6957 13 mov
(=) sh
/TimesNewRomanPSMT*6 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
33.6272 13 mov
(4) sh
restore_ctm
save_ctm
restore_ctm
/TimesNewRomanPS-ItalicMT*4 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
304.205 13 mov
(N) sh
/TimesNewRomanPSMT*9 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
315.476 13 mov
(=) sh
/TimesNewRomanPSMT*5 findfont [13 0 0 -13 0 0 ]mfnt sfnt
BuildWidthShowArray
325.408 13 mov
(5) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
gsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%%For: (NMR group ) (UoD)
%%Title: (eigsfig.eps)
%%CreationDate: 4/25/2004 11:42 PM
%AI9_DataStream
%Gb"/*>>s:t&q6b$s']64JiY9B7agM;eil>cZKram"_X/baVH2h_:FGoH$)^<rUo@>);TZ@P&*HrX&9-Qp%5qE\pK+D]6fcBkp0$%
%8(iY"jpEFTc@jN3mt?=ah;+^_$X%;^0uC^6J7oh7-TkcAL*qA@8=jDQC+dtUQtKo3'Ml%\bDQIGPXOQ@rUo>V=os/`SDRl!b7Q?)
%MiH`,/C*>RMejH2_ok-W:JT%\M9!m+e#^]%RJ3,A8NDosY:AP;=tGh=:>d6G_UJ[rJB<Krg#43gOk5G;-PQCRn3esJfZ_d6<cQ:D
%,+I`B@^`B./B50X.5.::UT"Bf#<ZW\^QTqBMDC78/?]rJJN,8ofm@<u?Ee:WQph^/n-G7V_uoq?T>ue9T&oRBAAZ\Y7k=>6J8tlg
%?.\S0FIZ;D3CMri6n)KA(&qIn>fs@*%/<PbI.?3pT/$Yq;Qmdc(NLEES)Q!tA"QTV!\O%B/g@t/B&J<n*r4ue]T&qeeCq,:$^]s=
%dfuEt#Z<'#%t]')X'],HJel_GSoFPjco/)kg1Ch9[@H4F)9K*?JnNI@ZLQonADM#s.7l]Can[-;8u_NU*I<HJ/e@K]GMSo92@>F*
%N8'F>=<QsVZ.kQ7>qFkTYb,G_Oa.tu_n<X@s$HKK#U7m'_&$)qo2fX"Rn1F`mIut#6mas42>QhhU.G!+U&NU[UF;bWP.!t\OkUCK
%?o;_4ebh7-b.MC)L=bSrR?"R[Q(h'!LkN6B'becB@CW[e`&MC\du.;FP3@b6iN!=7&34s+a4!"2:`e&QjBN4jL!242\3.":G3&h,
%=aUOp5u7f`:>Zk54R'0'[ooC(.#X(XpDZ$*[:+#Q=j"*Hq;ZSf1n.EGBOgBM+jj6TJL$`9X5/b=K?S'bfQfX4EC09C.P#'2'b\VT
%cU8Ln-P:[*[r;uqd_&#]i`&8m2]=$,,[M0>UmdK\3gG!hL37PWk=Clm7"-iKQZABl7?gQkbAibZWB%*?7.F%5D/#R`1[YUpRfMBE
%Y2SJFfnrb-c&H&@W;nMER80JcB$.Z1/)t.a:$hM/S4>T.KitJ`e\mk4-Wuk1;T+NPd/8<DdL;$AAekd()XM+g**7D<e+"&0Sp?N4
%De45.+lBgHQjpbic5+TlB0Nkko/M_.OScHm\&[MW8[Hj8/Jg42R^jn8+InhjBM<0WXb_tI5fj1@<LDnFXJk'a36TQeQ:oof7H:D4
%k.F#LED-P*N"L6P%E1%sOpIS`[%i.<o;EL-M:*dXB^sCub!AC]ZREB712:45G\ES%.Lj2Y:eNq;7Is@QpTV()O:3fRO3OT1$KeT;
%2ie\.\/b7aO'B1/NHLsaSFgbq>+FVnAtCH&?urIWc8EF`O5O:/FPbHj;7>LRZ8BmcKQ?'PA'c`#r2N9bWhoPt090XINbjjA:FT2D
%0I&//C@$e'e<(Le[7he+N_#W!`Z7s@9?gac`*alq\l`I])Ct64Lg(i*GGJDMVU;_>VlWCMeL3$*,^pOC5WbahUm76FXlr]k1eYMe
%.VC:On6fmNXK/,kq0H#5)'#k:,Z<G?<.-c%`u2;`"*WME9YKEL[FmmkG$,X$d=2CY$VFI;K8oFoNg:(K#spR?ZYdSueC];?S!78Y
%Z$&+>B564$ZX$hf[U]&#Q*+cNDK^_+osNJSh(;IJJXo3Rr>O[MfI!GpHtSAKX/RtF+j+@_1S4E71jbjp4*E=1fm@#N@t3i$o.6>'
%p2Ako`gCRQMe')6qU;(NXs/I&1uMtF\iM*-Haff_T5jNg^tpl6]k">HYh3K:2:*gB'?D+^d$stffO6,VTaR\YD!l#?9EhA5k`[BB
%(CVNF0&!f\I!E!#h"nO\QEL32-`em.a+KrA;(&Y\r+YR_"j[o"Dq_$b*]@l9\DV\#<*4O1B@Yue^!.ZnjTZYnjUB0jo^H=^eM)Ep
%1^ThQn[f!=7.Fad!L?M+$mt7%'T^pE?557Sb-IgS^Lb(nFU.<SL`Oo?QD`oF2JH*-NNb#J%b<HY,G[cb-3/sRM`IXjdVp/keYST1
%-:K<FXur[^Y;o6<Mb<?_h.s=tcp">]GYC+=j\$'PKQ%&M:OmuE=i`;#ggj8G@:OFBis\l551P=I5b2BD8O"!d-E1O8.r<fIm`)Y]
%3]r5PfAT$VSdtZn]GeWS+eVZ-QtH""42lc''f_o;L__e-&2B0TT^rOl0fl;f;WB_PYV'HcA"?]_U+4hb6o/ZWQTbn'#I6ffYsS(\
%+u^Pckpp$]DlA0`;PC"R96Np'6#+mkM"_aMXdj(?8ueOCAEE+QMOeJ$Z?J'2:en;UL$.TVXGBO&ESk0NX7C%/9?4+04OmFsF^EQ\
%KD/-GIYd#n^heRS+VOuA7H*-&fSo:*do73;*P7p>*KGDJdX4W`!0=_LI])0_[?8?[df_8?(L-a//"#L=2BV8ka&/2$K:Sb<[ER5T
%YSF2*=GGiq$J"W.:Cqs_'S0olXq.X$`s?tS1*P-[%Y8&8NOFSj\mYc.f>9XWF)*cmJ6!/Y>+"ar+qPo5g%\g1TQal&Lo:,Fjb@U#
%#ga9<So7iB_7-U`_nBoA2aBGY*+95ZFpu^i!>$0MPLVo@bI2hOSl<!e[_'h_L%J@2!F6oY/4.gE*.M6t"!Os>V[gmSkHeS;k\^Y)
%\e;7#?WYe@Wtp&uVSSj+Z.H>6GdN!M[-]^sCF5#UXdku^N@k[]?[(.W7ES@XKEh>/D@Pu`<iEFe_H-#ObL9Qa\H^#gfl>Ug4aT`F
%3hI29Lf7h9:hX,R7Qae>ej,%mdAb+MCh`Z\=LW$%mD07,L$Po\/R3KoN>Bq[h*Z56q6Z5Q>i03Ol4p(J=Ee`mko&;cFga8F7eamX
%@ZQR*.c9nd=LYFs:7Y$[?;M(J]u+Q/W35=jkd@SY=23[XE;*4jg[t(?S';Il2S)oL"Vj+WSkH@$L4#KI9AR-8P^]g9p=/d[=Y=<Q
%eP/m^YjRqiEK'N2*S0L\SLX?JX1uCZFrYhbH%i,:Fejq_@&'WjCaJg7a9VK/;rpKRU5j>jYgkPod7hCU"KICSWQ#r)\2RYN)QVE_
%k\Y6fgh3AmW`"l6DXknNL[81<'A_iq4n]`p[C7`apthLR2%IkS\"saH(k.^DgGOAb^I#@&#'8P_$@s.iZ\7ttrp$sSRs!=n"a=$?
%0&=!rdIhqD`L>BB3bhajgT)"_)S(DZJueX39*=D0_%tVoad*CDd7-gc@Tt_R?7FZ+X_@`R@hh+*Hrgc[@H\4aJ8*dpJjANHj/ANp
%*Q&U5miZ*aZVW_G[teSkL@$ItRSsUXC"NLpK.H@!,;bS1$_3g$#,:09C3=3L0b'm8j&?V27;)f6kGgr):(WN3Y3-X&kQCms#,h"7
%oira2I<%&7R"Ypb$$_!2L,9CJ(+pN%074=7<;QY@rjJJ>aKc9CHN>8Q"efEV*#hB\7>NGY44Fs!7QGVlM+Eu[oc;!nS;<GI=I':M
%2gB"kRLlKFSuYg*(:_1<L@@M@_Bf\9fqsVKEefV7!Y,N5pph3(jUO.ka$si7G&ikNkj9Pf'YkM+!7]Xg$NUQ="0*dJ*Ahj4-if?,
%'=51.$^q<7H413(+U*Nu<Pon@@"l$9jG)d5T,t+h(u--jQ<[.MW,hAG!,tL@63RW\7XL$<K,37KFflr,#[ie)^k*Xf'\KX.eSG7S
%FeR%!re0EbA$_K-g7Z/33X%n_ka3k([$i2GN50MA?^)i>YoV>femO'Rlb`8I@.F[QH0EQiR'jXQNBAj*SVrV&L1^Tk$.OM;A?\jP
%UPT`R$oA]kD;)Fej2)8`A(OaAY0mI4Be$?#5IROZBF;N!3.VJ*KV$K!3\^dN))jJ&a\.="JeW['j2/.pWB_'H>63\<\F;e_[L7LA
%!DAH2:"o"b)CI)V[Ip]&2]o#MJ8hAE.$=c#&;;fKRl5/P0kdmV0OK3*)f-jWVB(/)`.+NopB0MdF&DJ$U@rF-Mq;4t6R%DG]uHlH
%B1ksWEemVe?*X/Es-_m<dpp;X7njg!=R"h<!0U=-\%_NWEPJEp?0SZ/PJ2@SLl`rLru97L2n&+Ug@ma[m`Zd9n[]AslCd;hc9Eq2
%^:1.)o4NJeIC9!h!"Yb_iGe85g=9dbr2nV$4#?,rFU]s.*B)f`+*#Hunf.3%O*s*`IC/gT%BXU7s,)1[-%2Phh4"rTSCg#/ZPN2s
%`MLoY$MCNVcNpX?5>UKoT'*2/f$fqW4`&@IPJ&'o:Ue>`6c6>8s.\Y'VY]:^e3E>KBM/5M?%"b&ICsok7r^lq_4MM8C$6s>ZSF#l
%!_`0bNM=X;alo3)"<jM*@/JP'bYmTp3!B[JPpMV9jL@MCIm`3:['_Q)gk302<KMP]oli@_60NagA1Q7!md^,E_9W&]JVIXG~>
%AI9_PrivateDataEnd
